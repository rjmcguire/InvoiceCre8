{
  "name": "arango",
  "version": "0.4.1",
  "description": "ArangoDB javascript client",
  "keywords": [
    "arangodb",
    "client",
    "nosql"
  ],
  "author": {
    "name": "Kaerus",
    "email": "contact@kaerus.com",
    "url": "http://kaerus.com"
  },
  "contributors": [
    {
      "name": "anders elo",
      "email": "anders@kaerus.com"
    }
  ],
  "dependencies": {
    "micropromise": "git://github.com/kaerus-component/uP#0.3.7",
    "base64": "git://github.com/kaerus-component/base64.git#0.1.0",
    "urlparser": "git://github.com/kaerus-component/urlparser.git#0.3.9"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "should": "*",
    "component": "*",
    "mocha-phantomjs": "*"
  },
  "engine": "node >= 0.8.0",
  "bugs": {
    "url": "https://github.com/kaerus-component/arango/issues"
  },
  "scripts": {
    "test": "make test",
    "start": "node server.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kaerus-component/arango.git"
  },
  "main": "index.js",
  "license": "APACHE2_0",
  "readme": "ArangoDB client\n===============\nA client for the ArangoDB nosql database for nodejs and browsers.\n\nIntroduction\n============\nYou can use arango-client either as node.js server module or from a web client.\nSince arango-client is written as a commonJS module you can just require it in your nodejs project or using the generated build file which you can include into your client side app.\n\n\nInstall\n-------\n```\nFrom source: `git clone git://github.com/kaerus-component/arango`\nweb component: `component install kaerus-component/arango`\nnodejs module: `npm install arango` \n\n```\n\nBuilding\n--------\n```\nmake build\n```\nCreates a single build.js component in the ```./build``` directory.\nA standalone is built separately and named arango.js.\n\nTest\n----\n```\nmake test\n```\nRuns the test suite sequentially under nodejs and phantomjs.\nFeel free to chip in by writing tests if you want a more stable package.\nThe old test suite can be found [here](https://github.com/kaerus/arango-client/tree/master/test).\n\n\nQuick start\n===========\nTo use the client you require it at a commonJS module.\n```javascript\nvar arango = require('arango');\n``` \n\nThen you initialize a connection which returns a db handle.\n```javascript\nvar db = arango.Connection(\"http://myarangodb.server.com:8529\");\n\ndb.collection.list().done(function(res){\n  console.log(\"collections: %j\", res);\n});\n```\n\nIn a browser\n------------\nFor usage in a web browser you can either use the standalone version arango.js or the build.js component.\nA minimal html page using the arangodb client from a web app can look like this.\n```html\n<!doctype html>\n<html>\n<head>\n    <title>ArangoDB in your browser</title>\n    <meta charset=\"utf-8\"/>\n</head>\n<body>\n    <div id=\"test\"></div>\n    <script src=\"../build/build.js\"></script>\n    <script>\n        var arango = require('arango'),\n            elem = document.getElementById('test'),\n            db = new arango.Connection;\n\n        db.collection.list().then(function(res){\n            elem.innerHTML = JSON.stringify(res,null,2);\n        }, function(error){\n            elem.innerHTML = JSON.stringify(error,null,2);\n        })        \n    </script>\n</body>\n</html>\n```\n\nThe standalone version yields a global ```arango``` object.\n```html\n<!doctype html>\n<html>\n<head>\n    <title>ArangoDB in your browser</title>\n    <meta charset=\"utf-8\"/>\n</head>\n<body>\n    <div id=\"test\"></div>\n    <!-- Note: Exports global arango -->\n    <script src=\"../build/arango.js\"></script>\n    <script>\n        var elem = document.getElementById('test'),\n            db = new arango.Connection;\n\n        db.collection.list().then(function(res){\n            elem.innerHTML = JSON.stringify(res,null,2);\n        }, function(error){\n            elem.innerHTML = JSON.stringify(error,null,2);\n        })        \n    </script>\n</body>\n</html>\n```\n\n \n\nAPI\n===\nThe following API:s are (more or less) supported, check out the ArangoDB [documentation](http://www.arangodb.org/manuals/current/).\n  \n  * [transaction](http://www.arangodb.org/manuals/current/HttpTransactions.html)\n  * [collection](http://www.arangodb.org/manuals/current/HttpCollection.html)\n  * [database](http://www.arangodb.org/manuals/current/HttpDatabase.html)\n  * [document](http://www.arangodb.org/manuals/current/RestDocument.html)\n  * [action](http://www.arangodb.org/manuals/current/UserManualActions.html)\n  * [cursor](http://www.arangodb.org/manuals/current/HttpCursor.html)\n  * [simple](http://www.arangodb.org/manuals/current/HttpSimple.html)\n  * [index](http://www.arangodb.org/manuals/current/HttpIndex.html)\n  * [admin](http://www.arangodb.org/manuals/current/HttpSystem.html)\n  * [query](http://www.arangodb.org/manuals/current/HttpQuery.html)\n  * [graph](http://www.arangodb.org/manuals/current/HttpGraph.html)\n  * [batch](http://www.arangodb.org/manuals/current/HttpBatch.html)\n  * [edge](http://www.arangodb.org/manuals/current/RestEdge.html)\n  * [user](http://www.arangodb.org/manuals/current/HttpUser.html)\n  * [key](http://www.arangodb.org/manuals/current/) \n\n\nThe API methods return a [promise](https://github.com/kaerus-component/uP) but you may also pass a callback function as last argument which then gets called with the result.\n\nExample using a promise:\n```javascript\ndb.document.get(docid).then(function(res){ \n  console.log(\"res: %j\", res) \n},function(err){ \n  console.log(\"err: %j\", err) \n});\n```\n\nExample using a callback:\n```javascript\ndb.document.get(docid,function(err,res){\n  if(err) console.log(\"err: %j\", res);\n  else console.log(\"res: %j\", res);\n});\n```\n\n \nUsage\n=====\n\nConnect()\n---------\nFactory for arango connection.\nSets up a connection to localhost ```http://127.0.0.1:8529``` by default.\n```js\n  db = arango.Connection()\n```\n\nConnection string\n```js\n  db = arango.Connection(\"http://127.0.0.1/mydb:collection\");\n```\n\nConnection with http auth\n```js\n  db = arango.Connection(\"http://user:pass@your.host.com/database\");\n```\n\nConnection object\n```\n  db = arango.Connection({_name:\"database\",_collection:\"collection\",_server:{hostname:\"test.host\"}});\n```\n\nString and object\n```js\n  db = arango.Connection(\"http://test.host.com:80/default\",{_server:{username:\"user\",password:\"pass\"}});\n```\n\nString and api plugin\n```javascript\n  db = arango.Connection(\"http://test.host.com:80/foxx\",{api:{'foxx':require('foxx')}});\n```\n\napi\n----\nAn API can be implemented like this.\n```javascript\nvar Arango = require('arango');\n\nfunction StubAPI(db) {\n    returnÂ {\n      \"get\": function(callback){\n          /* The undefined argument can be used for passing htmlOptions */\n          /* example: options = {headers:{'content-type':'image/jpeg'}} */\n          return db.get('/path',undefined,callback);\n      },\n      \"post\": function(data,callback){\n          return db.post('/path',data,undefined,callback);\n      },\n      \"put\": function(data,callback){\n          return db.put('/path',data,undefined,callback);\n      },\n      \"delete\": function(callback){\n          return db.delete('/path',undefined,callback);\n      },\n      \"head\": function(callback){\n          return db.head('/path',undefined,callback);\n      },\n      \"patch\": function(data,callback){\n          return db.path('/path',data,undefined,callback);\n      },\n      \"options\": function(callback){\n          return db.options('/path',undefined,callback);\n      }\n    };\n}\n\n/* Attach the API into 'stub' namespace */\nmodule.exports = Arango.api('stub',StubAPI);\n```\n\n\nuse()\n-----\nWith use() you can switch connection settings\n```js\n  var test = db.use(\"http://test.host:8520\")\n```\n\nUse another database\n```js\n  var test_mydb = test.use(\"mydb\");\n```\n\nChange to another database & collection\n```js\n  var test_mydb2_mail = test_mydb.use(\"mydb2:mail\");\n```\n\nChange collection\n```js\n  var test_mydb2__users = test_mydb2_mail.use(\":_users\");\n```\n\nCreating collections & documents\n-------------------------------\nInitialize a Connection\n```js\nvar db = arango.Connection('http://127.0.0.1:8529');\n```\n\nCreate a new database\n```js\ndb.database.create('mydb').then(function(res){\n  console.log(\"Database created: %j\", res);\n},function(err){\n  console.log(\"Failed to create database: %j\", err);\n})\n```\n\nUse mydb database\n```js\nvar mydb = db.use('mydb');\n```\n\nCreate a 'test' collection\n```js\nmydb.collection.create('test').then(function(res){\n  console.log(\"result: %j\",res);\n},function(err){\n  console.log(\"error: %j\",err);\n});\n```\n\nList all collections in mydb, note the use of [done()](https://github.com/kaerus-component/uP#done)\n```js\nmydb.collection.list().done(function(res){\n  console.log(\"collections: %j\", res);\n});\n```\n\nCreate a collection with options\n```js\nmydb.collection.create('mycoll',{\n  journalSize: 10000000,\n  waitForSync:true,\n  keyOptions: { \n    type: \"autoincrement\", \n    increment: 5, \n    allowUserKeys: true \n  }\n}).then(function(res){\n  console.log(\"result: %j\",res);\n},function(err){\n  console.log(\"error: %j\",err);\n});\n```\n\nDelete collection (using callback)\n```js\nmydb.collection.delete('mycoll',function(err,ret){\n  console.log(\"error(%s): %j\", err, ret);\n});\n```\n\nCreate a 'test2' collection using callback instead of promise\n```js\nmydb.collection.create('test2',function(err,ret){\n  console.log(\"error(%s): %j\", err, ret);\n});\n```\n\nCreate a new document in 'test' collection \n```js\nmydb.document.create('test',{a:'test',b:123,c:Date()})\n  .then(function(res){ \n    console.log(\"res: %j\", res); \n  },function(err){ \n    console.log(\"err: %j\", err); \n  });  \n```\n\nGet a list of all documents in 'test' collection\n```js\nmydb.document.list('test')\n  .then(function(res){ \n    console.log(\"res: %j\", res); \n  },function(err){ \n    console.log(\"err: %j\", err); \n  });\n```\n\nCreate a new document and create a new collection by passing in options\n```js\nmydb.document.create(\"newcollection\",{a:\"test\"},{createCollection:true})\n  .then(function(res){ console.log(\"res\", JSON.stringify(res) },\n    function(err){ console.log(\"err\", err) } );\n});\n```\n\nCreate document and wait for disk sync\n```js\nmydb.document.create(\"newcollection\",{a:\"test\"},{waitForSync:true})\n  .then(function(res){ console.log(\"res\", JSON.stringify(res) },\n    function(err){ console.log(\"err\", err) } );\n});\n```\n\nCreate another document in the collection\n```js\ndb.document.create(\"newcollection\",{b:\"test\"})\n  .then(function(res){ console.log(\"res\", JSON.stringify(res) },\n    function(err){ console.log(\"err\", err) } );\n});\n```\n\nTry & catch\n-----------\nIf no collection named 'files' is found then.\n```js\ntry {\n  db.collection.list().then(function(res){\n    for(var n in res.collections){\n      if(res.collections[n].name === 'files') \n        return db.document.list(res.collections[n].name);\n    }\n    throw new Error(\"files not found\");\n  }).done(function(files){\n    console.log(\"list of files: %j\", files);\n  });\n} catch(err){\n  console.log(\"Error: \", err);\n}\n```\n\nJoining\n--------\n```js\n  db.admin.version()\n    .join(db.admin.time())\n    .spread(function(v,t){ \n    console.log(v.server,v.version,t.time);\n  });\n```\n\nCalling API methods directly\n----------------------------\nYou may also request any arangodb API method by using ```db[METHOD]()```.\nThis is particulary usefull when you create your own REST API in ArangoDB.\n\n```js\n  db.post(\"/myapi/object/create\",{a:1,b:2}).done(function(res){\n    console.log(\"result from API call: %j\", res);\n  });\n```\nMethods supported are: get(), put(), post(), delete(), options(), head(), patch().\n\n\n\nQueries\n-------\n```javascript\n/* simple query string */\ndb.query.exec(\"FOR u in test RETURN u\",function(err,ret){\n  console.log(\"err(%s):\", err, ret);\n});\n\n/* A bindvar for the collection name */\ndb.query.string = \"FOR u IN @@collection RETURN u\";\n...\n/* execute the query and pass the collection variable */\ndb.query.exec({'@collection':\"test\"},function(err,ret){\n  console.log(\"err(%s):\",util.inspect(ret));\n});\n```\nNote: ArangoDB expects @@ in front of collection names when using a bindvar.\nThe bindvar attribute in this case needs to be prefixed with a single @. \nIn all other cases the bindvar atttribute can be provided without any prefix \nand the variable in the query string is denoted with a single @ . \n\n\n\nQuery builder\n-------------\nResult batch size can be set using the ```query.count(<number>)``` method.\nIn case of partial results the next batch can be retrieved with res.next().\n```javascript\n/* using the query builder */\nquery = db.query.for('u').in('users')\n          .filter('u.contact.address.state == @state')\n          .collect('region = u.contact.region').into('group')\n          .sort('LENGTH(group) DESC').limit('0, 5')\n          .return('{\"region\": region, \"count\": LENGTH(group)}');\n\n\n/* show the composed query string */\nconsole.log(\"Arango query:\", query.string);\n                \n/* test run the query */\nquery.test(function(err,ret){\n  console.log(\"err(%s):\",err,ret);\n});\n\n/* execute the query and set the variable 'state' */\nquery.exec({state: \"CA\"})\n  .then(function(res){ console.log(\"res\",res) },\n    function(err){ console.log(\"err\",err) });\n\n\n/* detailed query explanation */\nquery.explain({state:\"CA\"},function(err,ret){\n  console.log(\"err(%s):\",err,ret);\n});\n\n/* nested queries embedded as functions(){} */\nquery = db.query.for('likes').in(function() {\n    this.for('u').in('users')\n    .filter('u.gender == @gender && @likes')\n    .from('u.likes').include(function() {\n      this.from('value').in('u.likes')\n      .filter('value != @likes')\n      .return('value');\n    });\n  }).collect('what = likes').into('group')\n  .sort('LENGTH(group) DESC')\n  .limit('0, 5')\n  .return('{\"what\": what, \"count\": LENGTH(group)}');\n\nquery.exec({gender:\"female\",likes:\"running\"}).then(function(res){\n  console.log(\"result:\",res);\n},function(err){\n  console.llg(\"error:\", err);\n});\n\n/* limit the result set to 1 item each iteration */\nquery.count(1).exec({gender:\"female\",likes:\"running\"}).then(do_something);\n\n\n```\nActions\n-------\nArangoDB supports user defined actions that can be used for implementing business logic or creating complex queries serverside.\n\nTo invoke an action you first need to define it.\n```javascript\n/* define an action */\ndb.action.define(\n    {\n      name: 'someAction',\n      url: 'http://127.0.0.1:8530/test'\n      method: 'post',\n      result: function(res){ console.log(\"res:\", res ) },\n      error: function(err){ console.log(\"err:\", err) }   \n    }\n);\n\n/* submit the action */\nvar data = {test:\"data\"}\ndb.action.submit(\"someAction\",data);\n\n/* submit using a callback */\ndb.action.submit(\"someAction\",data,function(err,ret){\n  console.log(\"err(%s):\", err, ret); \n}); \n\n/* Define an action that injects code serverside.*/\n/* the last argument reloads the routes, or use  */\n/* db.admin.routesReload() to reload the routes. */  \ndb.action.define({name:\"hello\",url:\"/hello\"},function(req,res){\n  /* Note: this code runs in the ArangoDB */\n  res.statusCode = 200;\n  res.contentType = \"text/html\";\n  res.body = \"Hello World!\";\n},true); \n\ndb.action.submit(\"hello\").then(function(res){\n  console.log(\"Server says:\", res);\n},function(error){\n  console.log(\"Error:\", error);\n});\n```\n\n\nTransactions\n------------\nTransactions are sent to arangodb using ```transaction.submit(collections,params,actions,options,callback)```.\nThe `params` and `options` arguments are optional and can be omitted from the function call.\nThe `options` argument can be used for altering http request headers if required.\n\n```javascript\n  \n  db.collection.create(\"accounts\").then(function(){\n    return this.join([\n      db.document.create(\"accounts\",{ _key: \"john\", amount: 423 }),\n      db.document.create(\"accounts\",{ _key: \"fred\", amount: 9 })\n    ]);\n  }).spread(function(john,fred){\n    console.log(\"john:\", JSON.stringify(john));\n    console.log(\"fred:\", JSON.stringify(fred));\n    \n      return [{\n        /* collections affected by this transaction */\n        write: \"accounts\"\n      },\n      {\n        /* transaction parameters passed to action */\n        user1: \"fred\",\n        user2: \"john\", \n        amount: 10\n      },\n      function (params) {\n        /* note: this code runs in arangodb */\n        var db = require(\"internal\").db;\n        var account1 = db.accounts.document(params['user1']);\n        var account2 = db.accounts.document(params['user2']);\n        var amount = params['amount'];\n\n        if (account1.amount < amount) {\n          throw \"account of user '\" + params['user1'] + \"' does not have enough money!\";\n        }\n\n        db.accounts.update(account1, { amount : account1.amount - amount });\n        db.accounts.update(account2, { amount : account2.amount + amount });\n\n        /* will commit the transaction and return the value true */\n        return true; \n      }]\n  }).spread(db.transaction.submit).then(function(ret){\n      console.log(\"Transaction success:\", JSON.stringify(ret));\n    },function(error){\n      console.log(\"Transaction failed:\", JSON.stringify(error));\n    }\n  );\n\n```\n\n\nBatch jobs\n----------\nThe BatchAPI allows you to bundle database requests.\n\nUse ```db.batch.start()```to initialize a batch job and ```db.batch.exec()``` to execute jobs. \n```javascript\n  // start a batch\n  db.batch.start();\n  \n  // collect admin information  \n  db.admin.version();\n  db.admin.statistics();\n  db.admin.log('info');\n  db.admin.time();\n\n  // execute batch\n  db.batch.exec().spread(function(batch,version,statistics,log,time){\n    console.log(\"Batch jobs requested=%s, returned results=%s\", batch.jobs, batch.length);\n    console.log(\"Version:\", JSON.stringify(version,null,2));\n    console.log(\"Statistics:\", JSON.stringify(statistics,null,2));\n    console.log(\"Log:\", JSON.stringify(log,null,2));\n    console.log(\"Time:\", JSON.stringify(time,null,2));\n  },function(error){\n    console.log(\"Batch job failed: %j\", error);\n  });\n```\n\nIndividual job results can be fetched as usual.\n```javascript\n  // start a batch\n  db.batch.start();\n  \n  // collect admin information  \n  db.admin.version().then(function(version){\n    console.log(\"Version:\", JSON.stringify(version,null,2));\n  });\n\n  db.admin.statistics().then(function(statistics){\n    console.log(\"Statistics:\", JSON.stringify(statistics,null,2));\n  });\n\n  // using callback\n  db.admin.log('info',function(err,ret){\n    if(!err){\n      console.log(\"Log:\", JSON.stringify(ret,null,2));\n    } \n  });\n  \n  db.admin.time(function(err,ret){\n    if(!err) console.log(\"Time:\", new Date(Math.floor(ret.time*1000)));\n  });\n\n  // execute batch\n  db.batch.exec().then(undefined,function(error){\n    console.log(\"Batch job failed: %j\", error);\n  });  \n \n```\n\n\nLicense\n=======\n```\nCopyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \n    http://www.apache.org/licenses/LICENSE-2.0\n \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n ",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kaerus-component/arango",
  "_id": "arango@0.4.1",
  "_from": "arango@"
}
