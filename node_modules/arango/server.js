var fs = require('fs'),
    http = require('http'),
    url = require('url'),
    logger = console;


var server_port = 3210;
var server_timout = 60*1000;

// http.createServer([requestListener])
// http.STATUS_CODES
// server.maxHeadersCount
// server.listen(port, [hostname], [backlog], [callback])
// response.writeHead(statusCode, [reasonPhrase], [headers])
/*
response.writeHead(200, { 'Content-Type': 'text/plain',
                          'Trailer': 'Content-MD5' });
response.write(fileData);
response.addTrailers({'Content-MD5': "7895bf4b8828b55ceaf47747b4bca667"});
response.end();
*/
// response.end([data], [encoding])

function onRequest(req,res){
    logger.info("request", req.headers);

    var path = url.parse(req.url).pathname.replace(/^[\.\/]/,'');
    path = path ? path : 'index.html';
    if(path[path.length-1] ==='/') path+= 'index.html';
    
    logger.info("request url %s ->", req.url, path);
    
    var data; 

    req.on('error',function(err){
        console.log("req error", err);
    });

    var type;

    if((type = path.match(/\.(.*)$/))) {
        switch(type[1]){
            case 'html':
                type = "text/html";
                break;
            case 'js':
                type = "text/javascript";
                break;
            case 'css':
                type = "text/css";
                break;         
            default:
                type = undefined;
                break;      
        }
    } 
    if(!type){
        res.writeHead(404,"Unkown file type");
        console.log("unknown type for path", path);
    } else {

        try {
            data = fs.readFileSync(path);
        } catch(err){
            res.writeHead(404, err);
            res.end();
            console.log("Failed to read", path);
            return;
        }
        console.log("serving %s data from", type, path);
        res.writeHead(200,{"content-type": type});
        res.end(data);   
    }
}

function onServer() {
    logger.info("Server start", this.address());
}


function onConnection(socket){
    var client = socket.address();

    logger.info("client connected", client);

    adsfsd = 2134;
    //console.log("socket", socket);
    socket.on('timeout', function(){
        logger.info("client timeout", client);
    });

    socket.on('error', function(err){
        logger.error("client error", client, err);
    });

    socket.on('close', function(){
        logger.info("client close", client);
    });

    socket.setTimeout(10000);
}




http.createServer(onRequest)
    .listen(server_port, onServer)
    .on('connection',onConnection);
/*
http.createServer(handler).listen(8888);



// Credentials lookup function
var credentialsFunc = function (id, callback) {

    var credentials = {
        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
        algorithm: 'sha256',
        user: 'Miia'
    };

    return callback(null, credentials);
};

// Create HTTP server

var handler = function (req, res) {

    Hawk.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {
        var response = {error:!!err,code:!err?200:401,message:!err ? 'Hello ' + credentials.user : 'Authentication failure'};
        res.writeHead(!err ? 200 : 401, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(response));
    });
};


var app = express(), db;
app.enable('trust proxy');

app.set('title', 'Login server');
app.set('jsonp callback name','authcb');

// development only
app.configure('development', function(){
    console.log("Development mode");
    db = new arango.Connection("http://127.0.0.1:8529/_users");
});

// production only
app.configure('production', function(){
    console.log("production mode");
    db = new arango.Connection("http://127.0.0.1:8529/_users");
});

app.use(requestHandler);
app.use(logError);
app.use(clientError);
app.use(finalError);

var userdb = {
    "test":{
        password: "qwerty1234",
        id: undefined,
        key: undefined,
        active: true
    },
    "hej":{
        password: "hello",
        id: undefined,
        key: undefined,
        active: false
    }
}


function authenticate(auth,callback){
    var user;

    if(typeof auth !== 'string' || (auth = auth.split(' ')).length !== 2) {
        console.log("Malformed authorization header", auth);
        return;
    }

    console.log("auth", auth);
    try {
        auth = hawk.crypto.base64urlDecode(auth[1]).split(':');
    } catch(err) {
        console.log("Malformed authorization header", auth);
        return;
    }   

    console.log("[%s] Authenticating user", new Date().toISOString(), auth[0]);

    return db.simple.first({user:auth[0]}).then(function(user){
        if(user.active && user.password === auth[1]) { 
            if(!user.id){
                user.id = Date.now();
                user.key = "123123123";
            }
            return user;
        } 
    }); 

}

// authentication handler
app.get('/authenticate',function(req,res){
    var status = 401, message, token;
    
    var auth = req.headers.authorization;

    if(auth) token = authenticate(auth).wait();

    if(!token) {
        message = hawk.error.STATUS_CODES[status];
    } else {
        message = token;
        status = 202;
    }

    res.format({
        'text/plain': function(){
            res.send(status,typeof message ==='string' ? message : JSON.stringify(message));
        },
        'text/html': function(){
            res.send(status,typeof message ==='string' ? message : JSON.stringify(message));
        },
        'application/json': function(){
            res.send(status,message);
        }
    });
   
});

function checkPath(path,callback){
    fs.stat(path,function(err,stats){
        if(!err) callback(!stats.isFile());
        else callback(err);
    });
}

// static file route, defaults to .html extension
app.get(/^\/?(\w+)?(?:\.(\w+))?$/,function(req,res){
    var file = req.params[0] ||Â 'index',
        ext = req.params[1] || 'html',
        path = 'public/' + ext + '/' + file + '.' + ext;

        var stat;

        try { stat = fs.statSync(path) } catch(err) {}
       
        if(stat && stat.isFile()){
            res.sendfile(path);
        } else {
            res.send(404,hawk.error.STATUS_CODES[404]);
        }
});


function requestHandler(req,res,next){
    
    next();

    console.log('[%s] %s (%s): %s %s %s',
        new Date().toISOString(),
        req.ip, 
        req.headers['user-agent'].substr(0,127), // truncate 
        req.method, 
        req.host,
        req.url.substr(0,127), // truncate 
        res.statusCode
    );
}

// error handlers
function logError(err, req, res, next){
  console.error(err.stack);
  next(err);
}

function clientError(err, req, res, next) {
  if (req.xhr) {
    res.send(500, { error: 'Internal server error!' });
  } else {
    next(err);
  }
}

function finalError(err, req, res, next) {
  res.status(500);
  res.render('error', { error: err });
}

app.listen(server_port);
console.log("server started on port", server_port);
*/