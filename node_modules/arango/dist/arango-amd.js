// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

define("arango.client", function () { return (function (modules) {
	var getModule, getRequire, require;
	getModule = (function (wrap) {
		return function (scope, tree, path, fullpath) {
			var name, dir, exports, module, fn, isDir;
			path = path.split('/');
			name = path.pop();
			if (!name) {
				isDir = true;
				name = path.pop();
			}
			if ((name === '.') || (name === '..')) {
				path.push(name);
				name = '';
			}
			while ((dir = path.shift())) {
				if (dir === '..') {
					scope = tree.pop();
				} else if (dir !== '.') {
					tree.push(scope);
					scope = scope[dir];
					if (!scope) {
						throw new Error("Could not find module '" + fullpath + "'");
					}
				}
			}
			if (name) {
				if (!isDir && scope[name + '.js']) {
					name += '.js';
				}
				if (typeof scope[name] === 'object') {
					tree.push(scope);
					scope = scope[name];
					name = 'index.js';
				}
			} else {
				name = 'index.js';
			}
			fn = scope[name];
			if (!fn) throw new Error("Could not find module '" + fullpath + "'");
			if (fn.hasOwnProperty('module')) return fn.module.exports;
			exports = {};
			fn.module = module = { exports: exports };
			fn.call(exports, exports, module, getRequire(scope, tree));
			return module.exports;
		};
	}(function (cmodule) {
		return function (ignore, module) {
			module.exports = cmodule.exports;
		};
	}));
	require = function (scope, tree, fullpath) {
		var name, path = fullpath, t = fullpath.charAt(0);
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			tree = [];
			path = path.slice(name.length + 1) || scope[':mainpath:'];
		}
		return getModule(scope, tree, path, fullpath);
	};
	getRequire = function (scope, tree) {
		return function (path) {
			return require(scope, [].concat(tree), path);
		};
	};
	return getRequire(modules, []);
})({
	"arango-client": {
		"index.js": function (exports, module, require) {
			module.exports = require( './lib/arango' );

		},
		"lib": {
			"ajax.js": function (exports, module, require) {
				/* 
				* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*     http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				"use strict"

				var Emitter = require('./emitter'),
				    inherit = require('./utils').inherit;


				function AjaxError(type,details) {
				    var ERR = {
				        'NOXHR':        [1000,'Ajax is not supported'],
				        'REQUEST':      [1001,'Operation failed'],
				        'UNIMPLEMENTED':[1002,'Not implemented'] 
				    };

				  return {
				        name: "Ajax",
				        type: type,
				        code: ERR[type][0],
				        message: ERR[type][1] + (details ? ': ' + details : '')
				    };  
				}


				/* Get browser xhr object */
				var Xhr = (function() {
				    if(typeof window.XMLHttpRequest !== 'undefined' ) {
				        return window['XMLHttpRequest'];
				    } else if(typeof window.ActiveXObject !== 'undefined') {
				        ['Msxml2.XMLHTTP.6.0','Msxml2.XMLHTTP.3.0','Microsoft.XMLHTTP'].forEach(function(x) {
				            try { return window.ActiveXObject(x) } catch (e) {}
				        }); 
				        throw AjaxError('NOXHR','XHR ActiveXObject failed');
				    } 
				    throw AjaxError('NOXHR','XHR support not found');
				}());


				/* ReadyState status codes */
				var XHR_CLOSED = 0,
				    XHR_OPENED = 1,
				    XHR_SENT = 2,
				    XHR_RECEIVED = 3,
				    XHR_DONE = 4, 

				/* headers to be filtered out */
				    UNSAFE_HEADERS = [
				        "accept-charset",
				        "accept-encoding",
				        "access-control-request-headers",
				        "access-control-request-method",
				        "connection",
				        "content-length",
				        "cookie",
				        "cookie2",
				        "content-transfer-encoding",
				        "date",
				        "expect",
				        "host",
				        "keep-alive",
				        "origin",
				        "referer",
				        "te",
				        "trailer",
				        "transfer-encoding",
				        "upgrade",
				        "user-agent",
				        "via"
				    ];

				/* Response object */
				function Response(request,callback) {
				    Emitter.call(this);
				    /* response data buffer */
				    this.data = [];
				    /* size of data */
				    this.data.size = 0;
				    /* invoke callback on response */
				    this.on('response',callback);
				    /* emit close after end or error */
				    this.after('end', function(){request.close()});
				    this.after('error', function(){request.close()});
				}

				inherit(Response, Emitter);

				Response.prototype.write = function(data) {
				    this.data.push(data);
				    this.data.size += data.length;
				    this.emit('data',this.data[this.data.length-1]);
				}; 

				Response.prototype.writeChunk = function(data) {
				    if(data.length > this.data.size) {
				        this.write(data.slice(this.data.size));
				    }         
				}

				/* Ajax request constructor */
				function Ajax(options,callback) { 
				    if(!(this instanceof Ajax))
				        return new Ajax(options,callback);

				    var ajax = this;
				    ajax._send = []; 
				    ajax.status = '';

				    ajax.xhr = new Xhr;

				    Emitter.call(this);

				    /* timeout handler */
				    if(options.timeout) {
				        ajax._timeout = options.timeout;
				        delete options.timeout;
				    } else {
				        ajax._timeout = 5000;
				    }    

				    ajax.timeoutHandler = function() {
				        ajax.status = 'TIMEDOUT';
				        ajax.xhr.abort();
				    }

				    ajax.response = new Response(ajax,callback);
				    /* emit response object to handler */ 
				    ajax.response.emit('response',ajax.response);

				    /* handle readystates */
				    ajax.xhr.onreadystatechange = function() {
				        switch(ajax.xhr.readyState) {
				            case XHR_DONE:  
				                if(!ajax.xhr.status) { 
				                    ajax.response.emit('error',AjaxError('REQUEST', ajax.xhr.statusText || ajax.status));
				                } else {
				                    ajax.response.statusCode = ajax.xhr.status;
				                    if(!ajax.response.headers) 
				                        ajax.response.headers = ajax.parseHeaders();
				                    /* setup error response on error */
				                    if(ajax.xhr.status > 399) {
				                        ajax.response.error = true;
				                        ajax.response.message = ajax.xhr.statusText;
				                    } else {
				                        ajax.response.writeChunk(ajax.xhr.responseText);
				                    }
				                    ajax.response.emit('end');
				                }
				                break;
				            case XHR_RECEIVED: 
				                ajax.response.headers = ajax.parseHeaders();
				                ajax.response.writeChunk(ajax.xhr.responseText);
				                break;
				            case XHR_SENT: 
				                ajax.emit('ready');
				                break;
				            case XHR_OPENED: 
				                break; 
				                case XHR_CLOSED: 
				                break;  
				        }
				    };

				    /* setup timers */
				    ajax.on('open',ajax.startTimer);
				    ajax.on('close',ajax.clearTimer);

				    /* send request */
				    ajax.request(options,callback);

				} /* Ajax() */

				inherit(Ajax,Emitter);

				/* write data to buffer */
				Ajax.prototype.write = function(data) {
				    this._send.push(data);
				    return this;
				}

				/* sends data */
				Ajax.prototype.end = function(data) {
				    if(data) this._send.push(data);
				    this.xhr.send(this._send.length > 0 ? this._send.join('') : null);
				}

				Ajax.prototype.close = function() {
				    this.emit('close');
				}

				Ajax.prototype.parseHeaders = function() {
				    var headers = {}, key, value, i, 
				        h = this.xhr.getAllResponseHeaders();

				    h.split('\n').forEach(function(header) {
				        i = header.indexOf(':');
				        key = header.slice(0,i).replace(/^[\s]+|[\s]+$/g,'').toLowerCase();
				        value = header.slice(i+1,header.length).replace(/^[\s]+|[\s]+$/g,'');
				        if(key && key.length) headers[key] = value;
				    });

				    return headers;
				}

				Ajax.prototype.request = function(options) {
				    /* Check if we have a file instead of a proper URL.          */
				    /* It is an ugly hack to get requests to work, under certain */
				    /* condiftions, when browsing from the local filesystem.     */ 
				    /* Note that this is a development feature and should only   */
				    /* be used when debugging/developing the application. */
				    var isFile = options.protocol === 'file',
				        url = isFile ? "http://127.0.0.1:8529" + options.path : 
				                options.protocol + '://' + 
				                options.hostname + ":" + 
				                options.port + 
				                options.path;
				   
				    options.method = options.method ? options.method : 'GET';

				    if(!options.headers) options.headers = {};

				    /* NOTE: headers in lowercase */
				    /* Set default content-type.  */
				    if(!options.headers["content-type"]) 
				        options.headers["content-type"] = "application/json";

				    /* prepare async request */
				    this.xhr.open(options.method,url,true);
				    this.emit('open',options.method,url);

				    /* set request headers, ignore unsafe headers */
				    Object.keys(options.headers).forEach(function(header) {
				        header = header.toLowerCase();
				        if(UNSAFE_HEADERS.indexOf(header) < 0)
				            this.xhr.setRequestHeader(header,options.headers[header]);
				    },this);
				}

				Ajax.prototype.startTimer = function() {
				    this.timer = setTimeout(this.timeoutHandler, this._timeout);
				}

				Ajax.prototype.clearTimer = function() {
				    clearTimeout(this.timer);
				}

				Ajax.prototype.resetTimer = function() {
				    clearTimeout(this.timer);
				    this.startTimer();
				}

				module.exports = {request: Ajax};
			},
			"api": {
				"action.js": function (exports, module, require) {
					/* 
					* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					*
					* Licensed under the Apache License, Version 2.0 (the "License");
					* you may not use this file except in compliance with the License.
					* You may obtain a copy of the License at
					*
					*     http://www.apache.org/licenses/LICENSE-2.0
					*
					* Unless required by applicable law or agreed to in writing, software
					* distributed under the License is distributed on an "AS IS" BASIS,
					* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					* See the License for the specific language governing permissions and
					* limitations under the License.
					*/

					"use strict"

					function closure(db){

					    var utils = require('../utils');

					    function ActionAPI() {
					        this.submit = {};
					    }

					    // Defines an action */
					    ActionAPI.prototype.define = function(o){

					        if(typeof o !== 'object')
					            throw new Error("Action object unspecified");

					        if(!o.name)
					            throw new Error("Action name missing");

					        if(!(o.url = utils.parseUrl(o.url))) 
					            throw new URIError("Action url invalid");

					        if(o.data && typeof o.data !== 'object')
					            throw new Error("Invalid action data type");

					        var options = {};

					        /* setup xhr options */
					        options.method = o.method ? o.method.toUpperCase() : 'GET';
					        options.protocol = o.url.protocol ? o.url.protocol : db.server.protocol;
					        options.hostname = o.url.hostname ? o.url.hostname : db.server.hostname;
					        options.port = o.url.port ? parseInt(o.url.port,10) : db.server.port; 

					        /* Pass through user defined xhr options                  */
					        /* Note: options.timeout sets a request timeout in ms     */
					        /* options.headers sets ajax headers such as content-type */
					        if(o.options) utils.extend(true,options,o.options); 

					        function action() {
					            var args = Array.prototype.splice.call(arguments);

					            /* Extend with o.data */
					            if(o.data) {
					                if(args[0] && typeof args[0] !== 'function'){
					                    if(utils.isArray(args[0])) {
					                        args[0].concat(o.data);
					                    } else if(typeof args[0] === 'object') {
					                        args[0] = utils.extend(true,o.data,args[0]);
					                    }     
					                } else {
					                    args.unshift(o.data);
					                }        
					            }    
					            /* insert path */
					            args.unshift(o.url.path ? (o.url.path.string ? o.url.path.string : o.url.path) :'');
					            /* and options */
					            args.unshift(options);

					            /* note: o.result, o.error are called whenever the promise has been fulfiled or rejected. */
					            /* However callback passed as argument has precedence. Unspecified result/error handlers   */
					            /* are ignored so that users can specify their own methods when invoking the action........*/
					            /* options, path, data, callback */
					            return db['raw'].apply(o.context,args).then(o.result,o.error);
					        }

					        /* bind this action to a name */
					        this.submit[o.name] = action;

					        return this; 
					    }

					    /* Executes an action and returns a promise */
					    ActionAPI.prototype.invoke = function(){
					        var args = Array.prototype.slice.call(arguments),
					            name = args.shift();

					        /* calls action handler, returns a promise */
					        return this.submit[name].apply(null,args);
					    }

					    return new ActionAPI;
					}

					module.exports = closure;
				},
				"admin.js": function (exports, module, require) {
					/* 
					 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					 *
					 * Licensed under the Apache License, Version 2.0 (the "License");
					 * you may not use this file except in compliance with the License.
					 * You may obtain a copy of the License at
					 *
					 *     http://www.apache.org/licenses/LICENSE-2.0
					 *
					 * Unless required by applicable law or agreed to in writing, software
					 * distributed under the License is distributed on an "AS IS" BASIS,
					 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					 * See the License for the specific language governing permissions and
					 * limitations under the License.
					 */

					"use strict"

					function closure(db) {

					    var params = require('../utils').Params,
					        path = "/_admin/";

					    function AdminAPI(){}

					    AdminAPI.prototype = {
					        "status": function(callback) {
					            return db['get'](path+"status",callback);  
					        },
					        "log":params([{severity:"string"},{options:"object"},{callback:"function"}], 
					            function(severity,options,callback) {
					                serverity = severity ? "?level="+severity : "";

					                Object.keys(options).forEach(function(param){
					                    severity += severity.length ? '&' : '?';
					                    severity += param+'='+options[param];
					                });

					                return db['get'](path+"log"+severity,callback);   
					            }
					        ),
					        "getConfig": function(callback) {
					            return db['get'](path+'config/configuration',callback);
					        },
					        "describeConfig": function(callback) {
					            return db['get'](path+'config/description',callback);
					        },
					        "listUsers": function(callback) {
					            return db['get'](path+'user-manager/users',callback);
					        },
					        "getUser": function(id,callback) {
					            return db['get'](path+'user-manager/user/'+id,callback);
					        },
					        "routes": function(callback) {
					            return db['get'](path+"routing/routes", callback);
					        },
					        "routesReload": function(callback){
					            return db['get'](path+"routing/reload", callback);
					        }
					    };

					    return new AdminAPI;
					}

					module.exports = closure;
				},
				"collection.js": function (exports, module, require) {
					/* 
					* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					*
					* Licensed under the Apache License, Version 2.0 (the "License");
					* you may not use this file except in compliance with the License.
					* You may obtain a copy of the License at
					*
					*     http://www.apache.org/licenses/LICENSE-2.0
					*
					* Unless required by applicable law or agreed to in writing, software
					* distributed under the License is distributed on an "AS IS" BASIS,
					* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					* See the License for the specific language governing permissions and
					* limitations under the License.
					*/

					"use strict"

					function closure(db) {

					    var params = require('../utils').Params,
					        path = "/_api/collection/";

					    function CollectionAPI(){}

					    CollectionAPI.prototype = {
					        "create": params([{collection:"string"},{data:"object"},{callback:"function"}],
					            function(collection,data,callback) {
					                collection = collection ? collection : db.name;
					                data = data ? data : {};
					                if(!data.name) data.name = collection;
					                return db['post'](path,data,callback);
					            }
					        ),
					        "get": function(id,callback) {
					            return db['get'](path+id,callback);   
					        },
					        "delete": function(id,callback) {
					            return db['delete'](path+id,callback);
					        },
					        "truncate": function(id,callback) {
					            return db['put'](path+id+'/truncate',null,callback);
					        },
					        "count": function(id,callback) {
					            return db['get'](path+id+'/count',callback);
					        },
					        "figures": function(id,callback) {
					            return db['get'](path+id+'/figures',callback);
					        },
					        "list": function(callback) {
					            return db['get'](path,callback);
					        },
					        "load": function(id,callback) {
					            return db['put'](path+id+'/load',null,callback);
					        },
					        "unload": function(id,callback) {
					            return db['put'](path+id+'/unload',null,callback);
					        },
					        "rename": function(id,data,callback) {
					            if(typeof data === 'string' ) data = {name: data};
					            return db['put'](path+id+'/rename',data,callback);
					        },
					        "getProperties": function(id,callback) {
					            return db['get'](path+id+'/properties',callback);
					        },
					        "setProperties": function(id,data,callback) {
					            return db['put'](path+id+'/properties',data,callback);
					        }
					    };

					    return new CollectionAPI;
					}

					module.exports = closure;

				},
				"cursor.js": function (exports, module, require) {
					/* 
					 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					 *
					 * Licensed under the Apache License, Version 2.0 (the "License");
					 * you may not use this file except in compliance with the License.
					 * You may obtain a copy of the License at
					 *
					 *     http://www.apache.org/licenses/LICENSE-2.0
					 *
					 * Unless required by applicable law or agreed to in writing, software
					 * distributed under the License is distributed on an "AS IS" BASIS,
					 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					 * See the License for the specific language governing permissions and
					 * limitations under the License.
					 */

					"use strict"

					function closure(db) {
					    
					    var path = "/_api/cursor/";

					    function CursorAPI(){}

					    CursorAPI.prototype = {
					        "get": function(id,callback) {
					            return db['put'](path+id,{},callback);
					        },
					        "create": function(data,callback) {
					            return db['post'](path,data,callback);
					        },
					        "query": function(data,callback) {
					            return db['post']("/_api/query",data,callback);
					        },
					        "explain": function(data,callback) {
					            return db['post']("/_api/explain",data,callback);
					        },
					        "delete": function(id,callback) {
					            return db['delete'](path+id,callback);
					        }
					    };

					    return new CursorAPI;
					}

					module.exports = closure;
				},
				"document.js": function (exports, module, require) {
					/* 
					* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					*
					* Licensed under the Apache License, Version 2.0 (the "License");
					* you may not use this file except in compliance with the License.
					* You may obtain a copy of the License at
					*
					*     http://www.apache.org/licenses/LICENSE-2.0
					*
					* Unless required by applicable law or agreed to in writing, software
					* distributed under the License is distributed on an "AS IS" BASIS,
					* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					* See the License for the specific language governing permissions and
					* limitations under the License.
					*/

					"use strict"

					function closure(db) {

					    var params = require('../utils').Params,
					        path = "/_api/document/",
					        xpath = "/_api/document?collection=";


					    function DocumentAPI(){}

					    DocumentAPI.prototype = {
					        "create":params([{create:"boolean"},{collection:"string"},{data:"object"},{callback:"function"}],
					            function(create,collection,data,callback) {
					                create = create ? "&createCollection=true" : "";
					                collection = collection ? collection : db.name;
					                return db['post'](xpath+collection+options,data,callback);
					            }
					        ),
					        "get":params([{match:"boolean"},{id:"string"},{rev:"string"},{callback:"function"}],
					            function(match,id,rev,callback) {
					                if(match !== undefined) {
					                    if(match) return db['raw']({method:'GET',headers:{"If-Match":rev||id}},path+id,callback);
					                    else return this_db['raw']({method:'GET',headers:{"If-None-Match":rev||id}},path+id,callback);
					                }
					                return db['get'](path+id,callback);
					            }
					        ),
					        "put":params([{match:"boolean"},{id:"string"},{rev:"string"},{data:"object"},{callback:"function"}],
					            function(match,id,rev,data,callback) {
					                if(match !== undefined) {
					                    if(match) return db['raw']({method:'PUT',headers:{"If-Match":rev||id}},path+id,data,callback);
					                    else return this_db['raw']({method:'PUT',headers:{"If-None-Match":rev||id}},path+id,data,callback);
					                }
					                return db['put'](path+id,data,callback);
					            }
					        ),
					        "patch":params([{match:"boolean"},{id:"string"},{rev:"string"},{data:"object"},{callback:"function"}],
					            function(match,id,rev,data,callback) {
					                if(match !== undefined) {
					                    if(match) return db['raw']({method:'PATCH',headers:{"If-Match":rev||id}},path+id,data,callback);
					                    else return this_db['raw']({method:'PATCH',headers:{"If-None-Match":rev||id}},path+id,data,callback);
					                }
					                return db['patch'](path+id,data,callback);
					            }
					        ),
					        "delete": function(id,callback) {
					            return db['delete'](path+id,callback);
					        },
					        "head": function(id,callback) {
					            return db['head'](path+id,callback);
					        },
					        "list":params([{collection:"string"},{callback:"function"}], 
					            function(collection,callback) {
					                collection = collection ? collection : db.name;
					                return db['get'](xpath+collection,callback);
					            }
					        )
					    }

					    return new DocumentAPI;
					}

					module.exports = closure;
				},
				"edge.js": function (exports, module, require) {
					/* 
					 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					 *
					 * Licensed under the Apache License, Version 2.0 (the "License");
					 * you may not use this file except in compliance with the License.
					 * You may obtain a copy of the License at
					 *
					 *     http://www.apache.org/licenses/LICENSE-2.0
					 *
					 * Unless required by applicable law or agreed to in writing, software
					 * distributed under the License is distributed on an "AS IS" BASIS,
					 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					 * See the License for the specific language governing permissions and
					 * limitations under the License.
					 */

					"use strict"

					function closure(db){

					    var params = require('../utils').Params,
					        path = "/_api/edge/",
					        xpath = "/_api/edge?collection=",
					        ypath = "/_api/edges/";

					    function EdgeAPI(){}

					    EdgeAPI.prototype = {
					        "create":params([{from:"string"},{to:"string"},{data:"object"},{callback:"function"}],
					            function(from,to,data,callback) {
					                return db['post'](xpath+db.name+'&from='+from+'&to='+to,data,callback);
					            }
					        ),
					        "get":params([{match:"boolean"},{id:"string"},{rev:"string"},{callback:"function"}],
					            function(match,id,rev,callback) {   
					                if(match !== undefined) {
					                    if(match) return db['raw']({method:'GET',headers:{"If-Match":rev||id}},path+id,callback);
					                    else return this_db['raw']({method:'GET',headers:{"If-None-Match":rev||id}},path+id,callback);
					                }
					                return db['get'](path+id,callback);
					            }
					        ),
					        "put":params([{match:"boolean"},{id:"string"},{rev:"string"},{data:"object"},{callback:"function"}],
					            function(match,id,rev,data,callback) {
					                if(match !== undefined) {
					                    if(match) return db['raw']({method:'PUT',headers:{"If-Match":rev||id}},path+id,data,callback);
					                    else return this_db['raw']({method:'PUT',headers:{"If-None-Match":rev||id}},path+id,data,callback);
					                } 
					                return db['put'](path+id,data,callback);
					            }
					        ),
					        "patch":params([{match:"boolean"},{id:"string"},{rev:"string"},{data:"object"},{callback:"function"}],
					            function(match,id,rev,data,callback) {
					                if(match !== undefined) {
					                    if(match) return db['raw']({method:'PATCH',headers:{"If-Match":rev||id}},path+id,data,callback);
					                    else return this_db['raw']({method:'PATCH',headers:{"If-None-Match":rev||id}},path+id,data,callback);
					                } 
					                return db['patch'](path+id,data,callback);
					            }
					        ),
					        "delete": function(id,callback) {
					            return db['delete'](path+id,callback);
					        },
					         "head": function(id,callback) {
					            return db['head'](path+id,callback);
					        },
					        "list":params([{vertex:"string"},{direction:"string"},{callback:"function"}],
					            function(vertex,direction,callback) {
					                direction = direction ? direction : "any";
					                var options = '?vertex='+vertex+'&direction='+direction;
					                return db['get'](ypath+db.name+options,callback);
					            }
					        )    
					    };

					    return new EdgeAPI;
					}

					module.exports = closure;
				},
				"index.js": function (exports, module, require) {
					/* 
					 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					 *
					 * Licensed under the Apache License, Version 2.0 (the "License");
					 * you may not use this file except in compliance with the License.
					 * You may obtain a copy of the License at
					 *
					 *     http://www.apache.org/licenses/LICENSE-2.0
					 *
					 * Unless required by applicable law or agreed to in writing, software
					 * distributed under the License is distributed on an "AS IS" BASIS,
					 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					 * See the License for the specific language governing permissions and
					 * limitations under the License.
					 */

					"use strict"

					function closure(db){

					    var path = "/_api/index/",
					        xpath = "/_api/index?collection=";

					    function IndexAPI(){};
					      
					    IndexAPI.prototype = {
					        "create": function(data,callback) {
					            return db['post'](xpath+db.name,data,callback);
					        },
					        "get": function(id,callback) {
					            return db['get'](path+id,callback);
					        },
					        "delete": function(id,callback) {
					            return db['delete'](path+id,callback);
					        },
					        "list":function(callback) {
					            return db['get'](xpath+db.name,callback);
					        }    
					    };

					    return new IndexAPI;
					}

					module.exports = closure;
				},
				"key.js": function (exports, module, require) {
					/* 
					* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					*
					* Licensed under the Apache License, Version 2.0 (the "License");
					* you may not use this file except in compliance with the License.
					* You may obtain a copy of the License at
					*
					*     http://www.apache.org/licenses/LICENSE-2.0
					*
					* Unless required by applicable law or agreed to in writing, software
					* distributed under the License is distributed on an "AS IS" BASIS,
					* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					* See the License for the specific language governing permissions and
					* limitations under the License.
					*/

					"use strict"

					function closure(db){

					    var params = require('../utils').Params,
					        path = "/_api/key/",
					        xpath = "/_api/keys/";

					    function KeyAPI(){}

					    KeyAPI.prototype = {
					        "get":function(key,callback) {
					            return db['get'](path+db.name+'/'+key,callback);
					        },
					        "create":params([{key:"string"},{expire:"string"},{options:"object"},{data:"object"},{callback:"function"}],
					            function(key,expire,options,data,callback) {
					                var headers = {};

					                if(options.expires) {
					                    if(typeof options.expires === 'object') expiry = options.expires;
					                    else expiry = new Date(Date.parse(options.expires,"yyyy-MM-dd HH:MM:SS"));
					                    headers['x-voc-expires'] = expiry.toISOString();
					                } else if(expire) {
					                    expiry = new Date(Date.parse(expire,"yyyy-MM-dd HH:MM:SS"));
					                    headers['x-voc-expires'] = expiry.toISOString();  
					                } 

					                if(options.extended) headers['x-voc-extended'] = JSON.stringify(options.extended);    
					                else if(options) headers['x-voc-extended'] = JSON.stringify(options);

					                return db['raw']({"method":"POST",headers:headers},path+db.name+'/'+key,data,callback);
					            }
					        ),
					        "put":params([{key:"string"},{expire:"string"},{options:"object"},{data:"object"},{callback:"function"}],
					            function(key,expire,options,data,callback) {
					                var headers = {};

					                if(options.expires) {
					                    if(typeof options.expires === 'object') expiry = options.expires;
					                    else expiry = new Date(Date.parse(options.expires,"yyyy-MM-dd HH:MM:SS"));
					                    headers['x-voc-expires'] = expiry.toISOString();
					                } else if(expire) {
					                    expiry = new Date(Date.parse(expire,"yyyy-MM-dd HH:MM:SS"));
					                    headers['x-voc-expires'] = expiry.toISOString();  
					                } 

					                if(options.extended) headers['x-voc-extended'] = JSON.stringify(options.extended);    
					                else if(options) headers['x-voc-extended'] = JSON.stringify(options);

					                return db['raw']({"method":"PUT",headers:headers},path+db.name+'/'+key+'?create=1',data,callback);
					            }
					        ),
					        "delete": function(key,callback) {
					            return db['delete'](path+db.name+'/'+key,callback);
					        },
					        "list": function(key,callback) {
					            return db['get'](xpath+db.name+'/'+key,callback);
					        }
					    };

					    return new KeyAPI;
					}

					module.exports = closure;
				},
				"query.js": function (exports, module, require) {
					/* 
					 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					 *
					 * Licensed under the Apache License, Version 2.0 (the "License");
					 * you may not use this file except in compliance with the License.
					 * You may obtain a copy of the License at
					 *
					 *     http://www.apache.org/licenses/LICENSE-2.0
					 *
					 * Unless required by applicable law or agreed to in writing, software
					 * distributed under the License is distributed on an "AS IS" BASIS,
					 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					 * See the License for the specific language governing permissions and
					 * limitations under the License.
					 */

					"use strict"

					function closure(db){

					    var utils = require('../utils');

					      
					    function Aql(){
					        var keywords = ['for','in','filter','from','include','collect','into','sort','limit','let','return'],
					            aql = this;
					     
					        keywords.forEach(function(key) {
					            aql[key] = function() {
					                if(!aql.struct) aql.struct = {};
					                if(!arguments.length) return aql.struct[key];
					                var args = Array.prototype.slice.call(arguments);
					                if(typeof args[0] === 'function') {
					                    aql.struct[key] = (function(func) {
					                        var faql = new Aql();
					                        func.apply(faql);

					                        return faql.struct;
					                    })(args[0]);
					                } else if( args[0] instanceof Aql) {
					                    aql.struct[key] = args[0].struct;
					                } else {
					                    if(key === 'filter' || key === 'let') {
					                        if(!aql.struct[key]) aql.struct[key] = [];
					                        aql.struct[key].push(args.join(' '));
					                    } else aql.struct[key] = args.join(' ');   
					                }

					                return aql;
					            }
					        });
					        
					        function structToString(s) {
					            var struct = s || aql.struct;
					            return keywords.filter(function(key) {
					                return struct[key] ? true : false;
					            }).map(function(q) {
					                var keyword = q.toUpperCase(), value = struct[q];
					                switch(keyword) {
					                    case 'FROM': keyword = 'IN'; break;
					                    case 'INCLUDE': keyword = ''; break;
					                    case 'FILTER': value = value.join(' && '); break;
					                    case 'LET': value = value.join(' LET '); break;
					                    default: break;
					                }   
					                if(typeof value === 'object') { 
					                    var nested = structToString(value);
					                    if( q === 'in' ) 
					                        return keyword + ' ( ' +  nested + ' )';
					                    else 
					                        return keyword + ' ' + nested;
					                } else return keyword + ' ' + value;
					            }).join(' ');
					        }

					        aql.toString = structToString;
					    }


					    function QueryAPI(){
					        this.options = {};

					        var query = this;

					        Aql.call(this);

					        /* transforms struct to string */
					        Object.defineProperty(query,"query",{
					            string: null,
					            get: function() {
					                if(query.struct) {
					                    this.string = query.toString();
					                    delete query.struct;
					                }

					                return this.string;
					            },
					            set: function(val) {
					                this.string = val;
					                delete query.struct;

					                return this.string;
					            }
					        });
					    }

					    utils.inherit(QueryAPI,Aql);

					    function exec_query(query,method,args) {
					        var q = {}, i = 0, a = Array.prototype.slice.call(args);

					        utils.extend(true, q, query.options);

					        /* use Aql object */
					        if(a[i] instanceof Aql)
					            q.query = a[i++].toString();
					        /* use query string */
					        else if(typeof a[i] === 'string')
					            q.query = a[i++];
					        else
					            q.query = query.query;

					        /* merge with object */
					        if(typeof a[i] === 'object') {
					            if(a[i].hasOwnProperty('bindVars'))
					                utils.extend(true, q, a[i++])
					            else q.bindVars = a[i++];
					        }  

					        return db[method](q,a[i]);
					    }

					    QueryAPI.prototype = {
					        "test": function() {
					            return exec_query(this,"query",arguments);
					        },
					        "explain": function() {
					            return exec_query(this,"explain",arguments);
					        },
					        "exec": function() {
					            var on_result = function(retval) {

					                if(retval.hasMore) {
					                    this.next = function() {
					                        return db.cursor.get(retval.id).then(on_result);
					                    }
					                } else delete this.next;    

					                return retval.result;
					            } 

					            return exec_query(this,"create",arguments).then(on_result);
					        },
					        "count": function(num) {
					            this.options.count = num > 0 ? true : false;
					            this.options.batchSize = num > 0 ? num : undefined;
					      
					            return this;
					        },
					        "new": function() {
					            return new Aql();
					        },
					        "hasNext": function() {
					            return this.next !== Query.prototype.next;
					        },
					        "next": function() {
					            throw { name: "StopIteration" };
					        }
					    };    

					    return new QueryAPI;
					}

					module.exports = closure;

				},
				"simple.js": function (exports, module, require) {
					/* 
					* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
					*
					* Licensed under the Apache License, Version 2.0 (the "License");
					* you may not use this file except in compliance with the License.
					* You may obtain a copy of the License at
					*
					*     http://www.apache.org/licenses/LICENSE-2.0
					*
					* Unless required by applicable law or agreed to in writing, software
					* distributed under the License is distributed on an "AS IS" BASIS,
					* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
					* See the License for the specific language governing permissions and
					* limitations under the License.
					*/

					"use strict"

					function closure(db){

					    var path = "/_api/simple/";

					    function SimpleAPI(){}

					    function applyOptions(o,data,attributes) {
					        if(typeof attributes === 'object') {
					            Object.keys(attributes).forEach(function(option){
					                switch(option){
					                    case 'from': data.left = attributes[option];
					                        data.closed = true;
					                        break;
					                    case 'to': data.right = attributes[option];
					                        data.closed = true;
					                        break;
					                    default:
					                        data[option] = attributes[option];
					                        break;          
					                }   
					                /* apply skip/limit preferences */
					                if(o._skip && !data.skip) data.skip = o._skip;
					                if(o._limit && !data.limit) data.limit = o._limit;
					            });
					        }

					        return data;
					    }

					    SimpleAPI.prototype = {
					        "list": function(attributes,callback) {
					            var data = {collection: db.name};
					            return db['put'](path+'all',applyOptions(this,data,attributes),callback);
					        },
					        "example": function(example,attributes,callback) {
					            var data = {collection: this_db.name, example:example};
					            return db['put'](path+'by-example',applyOptions(this,data,attributes),callback);
					        },
					        "first": function(example,callback) {
					            var data = {collection: db.name, example:example};
					            return db['put'](path+'first-example',data,callback);    
					        },
					        "range": function(attributes,callback) {
					            var data = {collection: db.name};
					            return db['put'](path+'range',applyOptions(this,data,attributes),callback);
					        },
					        "near": function(attributes,callback) {
					            var data = {collection: db.name};
					            return db['put'](path+'near',applyOptions(this,data,attributes),callback);
					        },
					        "within": function(attributes,callback) {
					            var data = {collection: db.name};
					            return db['put'](path+'within',applyOptions(this,data,attributes),callback);
					        },
					        "skip": function(val) {
					            this._skip = val;
					        },
					        "limit": function(val) {
					            this._limit = val;
					        }
					    };

					    return new SimpleAPI;
					}

					module.exports = closure;
				}
			},
			"arango.js": function (exports, module, require) {
				/* 
				 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
				 *
				 * Licensed under the Apache License, Version 2.0 (the "License");
				 * you may not use this file except in compliance with the License.
				 * You may obtain a copy of the License at
				 *
				 *     http://www.apache.org/licenses/LICENSE-2.0
				 *
				 * Unless required by applicable law or agreed to in writing, software
				 * distributed under the License is distributed on an "AS IS" BASIS,
				 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				 * See the License for the specific language governing permissions and
				 * limitations under the License.
				 */

				"use strict"

				var BROWSER = (typeof window ==='object' && window.hasOwnProperty('location')),
				    WINDOW_LOCATION = (BROWSER ? window.location : false), 
				    utils = require('./utils'), 
				    request = require('./request');

				var api = {
				  "collection": require('./api/collection'),
				  "document": require('./api/document'),
				  "action": require('./api/action'),
				  "cursor": require('./api/cursor'),
				  "simple": require('./api/simple'),
				  "index": require('./api/index'),
				  "admin": require('./api/admin'),
				  "query": require('./api/query'),
				  "edge": require('./api/edge'),
				  "key": require('./api/key')
				};

				function Connection() {
				    this.use.apply(this,arguments);

				    Object.defineProperty(this,"server",{
				        get: function () {
				            return {protocol:this.protocol, 
				                    hostname:this.hostname,
				                    port:this.port,
				                    headers:this.headers };
				        }
				    });
				 
				    /* Include API modules */
				    for(var module in api) {
				        this[module] = api[module](this);
				    } 
				}

				Connection.prototype = {
				    "get": function(path,callback){
				        return request(this,{method:"GET"},path,null,callback);
				    },
				    "post": function(path,data,callback){
				        return request(this,{method:"POST"},path,data,callback);
				    },
				    "put": function(path,data,callback){
				        return request(this,{method:"PUT"},path,data,callback);
				    },
				    "delete": function(path,callback){
				        return request(this,{method:"DELETE"},path,null,callback);
				    },
				    "head": function(path,callback){
				        return request(this,{method:"HEAD"},path,null,callback);
				    },
				    "patch": function(path,data,callback){
				        return request(this,{method:"PATCH"},path,data,callback);
				    },
				    "raw": function(options,path,data,callback){
				        return request(this,options,path,data,callback);
				    },
				    "use": function() {
				        for(var i = 0, connection; connection = arguments[i]; i++) {
				            if(typeof connection === 'object') {
				                utils.extend(true,this,connection);
				            }
				            else if(typeof connection === 'string') {
				                var conn = utils.parseUrl(connection);
				                if(conn) {
				                    utils.extend(this,conn);
				                    /* get collection name from path */
				                    if(conn.path) {
				                        this.path = conn.path;
				                        if(typeof this.path === 'string') {
				                            this.name = this.path;
				                        } else if(typeof this.path === 'object') {
				                            this.name = this.path.first;
				                        }
				                    }   
				                } else {
				                    /* Connection string is a collection name */
				                    this.name = connection;
				                }    
				            } else throw new Error("Invalid connection");
				        }

				        /* apply defaults */ 
				        this.protocol = this.protocol || (WINDOW_LOCATION ? WINDOW_LOCATION.protocol.split(':')[0] : "http");
				        this.hostname = this.hostname || (WINDOW_LOCATION ? WINDOW_LOCATION.hostname : "127.0.0.1");
				        this.port = parseInt(this.port,10) || (WINDOW_LOCATION ? WINDOW_LOCATION.port : 8529);
				        this.name = this.name || "";
				        this.headers = this.headers || {};

				        /* Basic authorization */
				        if(this.username) this.headers.authorization = 'Basic ' + 
				            this.crypto.enc.Utf8.parse(this.username + ':' + this.password).toString(this.crypto.enc.Base64);

				        return this;
				    },
				    "crypto": require('./ext/crypto')
				}

				module.exports = {Connection: Connection};

			},
			"emitter.js": function (exports, module, require) {
				/* 
				* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*     http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				"use strict"

				function isArray(a) {
				    return Object.prototype.toString.call(a) === '[object Array]'
				}

				function Emitter() {
				    if(!(this instanceof Emitter)) {
				        return new Emitter();
				    }  

				    Object.defineProperty(this,'_events',{
				        enumerable: false,
				        value: {}
				    });
				}

				Emitter.prototype.on = function(event,handler) {
				    var e;
				    
				    if(!(e = this._events[event])) {
				        this._events[event] = handler;
				    } else if(!isArray(e)) {
				        if(e !== handler) this._events[event] = [e].concat(handler);  
				    } else {
				        if(e.indexOf(handler) < 0) e[e.length] = handler; 
				    }    

				    return this;
				}

				Emitter.prototype.before = function(event,handler) {
				     return this.on(event,{before:handler});
				}

				Emitter.prototype.after = function(event,handler) {
				     return this.on(event,{after:handler});
				}

				Emitter.prototype.hasEvent = function(name) {
				    return !!this._events[name];
				}

				Emitter.prototype.off = function(event,handler) {
				    if(!this._events[event]) return;

				    if(!handler || !isArray(this._events[event])) {
				        if(!handler || this._events[event] === handler)
				            delete this._events[event];
				    } else {
				        /* remove matching handlers */
				        this._events[event] = this._events[event].filter(function(f){
				            return f !== handler && f.before !== handler && f.after !== handler
				        });
				        /* remove event if empty */
				        if(!this._events[event].length) delete this._events[event];
				        else if(this._events[event].length === 1) 
				            this._events[event] = e[0];
				    }   

				    return this;
				}

				Emitter.prototype.emit = function(event) {
				    var e;

				    if(!(e = this._events[event])) return;

				    var args = Array.prototype.slice.call(arguments,1),
				        handler, before, after = [], stop = false;

				    if(!isArray(e)) {
				        e.apply(null,args);

				        return this;
				    }

				    before = e.filter(function(f){return f.before});

				    before.forEach(function(o){
				        if(!stop) {
				            if(o.before.apply(null,args) === false ) {
				                stop = true;
				            }
				        }
				    });

				    if(stop) return this;

				    for (var i = 0, l = e.length; i < l; i++) {
				        handler = e[i];
				        if(typeof handler === 'function' ) {
				            /* stop propagation on false */
				            if( handler.apply(null,args) === false ) {
				                stop = true;
				                break;
				            }
				        } else if(typeof handler === 'object' && handler.after) {
				            after[after.length] = handler.after;
				        } /* silently ignore invalid handlers */   
				    }

				    after.forEach(function(handler){
				        if(!stop) {
				            if(handler.apply(null,args) === false ) {
				                stop = true;
				            }
				        }  
				    });  

				    return this;
				}

				Emitter.prototype.once = function(event,handler) {
				    var self = this;

				    this.on(event, function h() {
				        self.off(event, h);
				        handler.apply(null, arguments);
				    });

				    return this;
				}

				module.exports = Emitter;
			},
			"ext": {
				"crypto.js": function (exports, module, require) {
					/*
					CryptoJS v3.0.2
					code.google.com/p/crypto-js
					(c) 2009-2012 by Jeff Mott. All rights reserved.
					code.google.com/p/crypto-js/wiki/License
					*/
					"use strict"

					var CryptoJS=CryptoJS||function(i,p){var f={},q=f.lib={},j=q.Base=function(){function a(){}return{extend:function(h){a.prototype=this;var d=new a;h&&d.mixIn(h);d.$super=this;return d},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var d in a)a.hasOwnProperty(d)&&(this[d]=a[d]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.$super.extend(this)}}}(),k=q.WordArray=j.extend({init:function(a,h){a=
					this.words=a||[];this.sigBytes=h!=p?h:4*a.length},toString:function(a){return(a||m).stringify(this)},concat:function(a){var h=this.words,d=a.words,c=this.sigBytes,a=a.sigBytes;this.clamp();if(c%4)for(var b=0;b<a;b++)h[c+b>>>2]|=(d[b>>>2]>>>24-8*(b%4)&255)<<24-8*((c+b)%4);else if(65535<d.length)for(b=0;b<a;b+=4)h[c+b>>>2]=d[b>>>2];else h.push.apply(h,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,b=this.sigBytes;a[b>>>2]&=4294967295<<32-8*(b%4);a.length=i.ceil(b/4)},clone:function(){var a=
					j.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var b=[],d=0;d<a;d+=4)b.push(4294967296*i.random()|0);return k.create(b,a)}}),r=f.enc={},m=r.Hex={stringify:function(a){for(var b=a.words,a=a.sigBytes,d=[],c=0;c<a;c++){var e=b[c>>>2]>>>24-8*(c%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join("")},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c+=2)d[c>>>3]|=parseInt(a.substr(c,2),16)<<24-4*(c%8);return k.create(d,b/2)}},s=r.Latin1={stringify:function(a){for(var b=
					a.words,a=a.sigBytes,d=[],c=0;c<a;c++)d.push(String.fromCharCode(b[c>>>2]>>>24-8*(c%4)&255));return d.join("")},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c++)d[c>>>2]|=(a.charCodeAt(c)&255)<<24-8*(c%4);return k.create(d,b)}},g=r.Utf8={stringify:function(a){try{return decodeURIComponent(escape(s.stringify(a)))}catch(b){throw Error("Malformed UTF-8 data");}},parse:function(a){return s.parse(unescape(encodeURIComponent(a)))}},b=q.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=k.create();
					this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=g.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var b=this._data,d=b.words,c=b.sigBytes,e=this.blockSize,f=c/(4*e),f=a?i.ceil(f):i.max((f|0)-this._minBufferSize,0),a=f*e,c=i.min(4*a,c);if(a){for(var g=0;g<a;g+=e)this._doProcessBlock(d,g);g=d.splice(0,a);b.sigBytes-=c}return k.create(g,c)},clone:function(){var a=j.clone.call(this);a._data=this._data.clone();return a},_minBufferSize:0});q.Hasher=b.extend({init:function(){this.reset()},
					reset:function(){b.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);this._doFinalize();return this._hash},clone:function(){var a=b.clone.call(this);a._hash=this._hash.clone();return a},blockSize:16,_createHelper:function(a){return function(b,d){return a.create(d).finalize(b)}},_createHmacHelper:function(a){return function(b,d){return e.HMAC.create(a,d).finalize(b)}}});var e=f.algo={};return f}(Math);
					(function(i){var p=CryptoJS,f=p.lib,q=f.WordArray,f=f.Hasher,j=p.algo,k=[],r=[];(function(){function f(a){for(var b=i.sqrt(a),d=2;d<=b;d++)if(!(a%d))return!1;return!0}function g(a){return 4294967296*(a-(a|0))|0}for(var b=2,e=0;64>e;)f(b)&&(8>e&&(k[e]=g(i.pow(b,0.5))),r[e]=g(i.pow(b,1/3)),e++),b++})();var m=[],j=j.SHA256=f.extend({_doReset:function(){this._hash=q.create(k.slice(0))},_doProcessBlock:function(f,g){for(var b=this._hash.words,e=b[0],a=b[1],h=b[2],d=b[3],c=b[4],i=b[5],j=b[6],k=b[7],l=0;64>
					l;l++){if(16>l)m[l]=f[g+l]|0;else{var n=m[l-15],o=m[l-2];m[l]=((n<<25|n>>>7)^(n<<14|n>>>18)^n>>>3)+m[l-7]+((o<<15|o>>>17)^(o<<13|o>>>19)^o>>>10)+m[l-16]}n=k+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&i^~c&j)+r[l]+m[l];o=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&a^e&h^a&h);k=j;j=i;i=c;c=d+n|0;d=h;h=a;a=e;e=n+o|0}b[0]=b[0]+e|0;b[1]=b[1]+a|0;b[2]=b[2]+h|0;b[3]=b[3]+d|0;b[4]=b[4]+c|0;b[5]=b[5]+i|0;b[6]=b[6]+j|0;b[7]=b[7]+k|0},_doFinalize:function(){var f=this._data,g=f.words,b=8*this._nDataBytes,
					e=8*f.sigBytes;g[e>>>5]|=128<<24-e%32;g[(e+64>>>9<<4)+15]=b;f.sigBytes=4*g.length;this._process()}});p.SHA256=f._createHelper(j);p.HmacSHA256=f._createHmacHelper(j)})(Math);

					module.exports = CryptoJS;
				}
			},
			"promise.js": function (exports, module, require) {
				/* 
				* Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*     http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				"use strict"

				var setImmediate = (function(root){
				    if(!root.setImmediate || typeof root.setImmediate !== 'function') {
				        if(root.process && typeof root.process.nextTick === 'function') {
				            return root.process.nextTick;
				        } else if (root.MessageChannel && typeof root.MessageChannel === "function") {
				            var fifo = [], channel = new root.MessageChannel();
				            channel.port1.onmessage = function () { fifo.shift()() };
				            return function (task){ fifo[fifo.length] = task; channel.port2.postMessage(); };
				        } else {
				            return root.setTimeout;
				        }    
				    } else return root.setImmediate;
				}(this));

				var PROMISE = 0, FULFILLED = 1, REJECTED = 2;

				function Promise() {
				    if(!(this instanceof Promise))
				        return new Promise;
				}

				Promise.prototype.resolve = function() {
				    var then, promise,
				        state = this.state,
				        value = this.resolved;  

				    while(then = this.calls.shift()) {
				        promise = then[PROMISE];

				        if(then[this.state] !== undefined) {
				            if(typeof then[this.state] === 'function') {
				                try {
				                    value = then[this.state](this.resolved);  
				                } catch(e) {
				                    promise.reject(e); 

				                    continue;   
				                }
				            } else value = then[this.state];    

				            if(value instanceof Promise || (value && value.then) )  {
				                value.then(function(v){
				                    promise.fulfill(v); 
				                }, function(r){
				                    promise.reject(r);
				                });

				                continue;
				            } else {
				                state = FULFILLED;
				            }  
				        }
				        promise.state = state;
				        promise.resolved = value;
				        if(promise.calls) promise.resolve();
				    }
				}       

				Promise.prototype.then = function(onFulfill,onReject) {
				    var self = this, promise = new Promise();

				    if(!this.calls) this.calls = [];   

				    this.calls[this.calls.length] = [promise, onFulfill, onReject];

				    if(this.resolved) {
				        setImmediate(function(){
				            self.resolve();
				        });
				    }    

				    return promise;
				}

				Promise.prototype.spread = function(onFulfill,onReject) {

				    function spreadFulfill(value) {
				        if(!Object.prototype.toString.call(value) === '[object Array]') 
				            value = [value];

				        return onFulfill.apply(null,value);
				    }   

				    return this.then(spreadFulfill,onReject);
				}

				Promise.prototype.include = function(value) {
				    var self = this, promise = new Promise();

				    if(!this.calls) this.calls = [];

				    function includeFulfill(resolved) {
				        if(typeof value === 'function') value = value(resolved);

				        if(value instanceof Promise || (value && value.then)) {
				            value.then(function(newValue){
				                promise.fulfill([resolved,newValue]);
				            },function(reason){
				                promise.reject(reason);
				            });
				        } else {
				            promise.fulfill([resolved,value]);
				        }    
				    }

				    this.calls[this.calls.length] = [this, includeFulfill]

				    if(this.resolved) {
				        setImmediate(function(){
				            self.resolve();
				        });
				    }

				    return promise;
				}

				Promise.prototype.fulfill = function(value) {
				    if(this.state) return;
				    /* Constructs an array of fulfillment values */
				    /* if more than one argument was provided... */
				    if(arguments.length > 1) 
				        value = Array.prototype.slice.call(arguments);

				    this.state = FULFILLED;
				    this.resolved = value;

				    if(this.calls) this.resolve();

				    return this;
				}

				Promise.prototype.reject = function(reason) {
				    if(this.state) return;

				    this.state = REJECTED;
				    this.resolved = reason;

				    if(this.calls) this.resolve();   

				    return this;        
				}


				module.exports = Promise;
			},
			"request.js": function (exports, module, require) {
				/* 
				 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
				 *
				 * Licensed under the Apache License, Version 2.0 (the "License");
				 * you may not use this file except in compliance with the License.
				 * You may obtain a copy of the License at
				 *
				 *     http://www.apache.org/licenses/LICENSE-2.0
				 *
				 * Unless required by applicable law or agreed to in writing, software
				 * distributed under the License is distributed on an "AS IS" BASIS,
				 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				 * See the License for the specific language governing permissions and
				 * limitations under the License.
				 */

				"use strict"

				var BROWSER = (typeof window === 'object'),
				    Promise = require('./promise'),
				    utils = require('./utils'), 
				    Ajax = {};

				/* Bring in Xhr support for nodejs or browser */
				if(!BROWSER) {
				    Ajax.request = function(options,callback) {
				        var request = (require)(options.protocol).request;
				  
				        delete options.protocol;

				        if(options.timeout) {
				            request.socket.setTimeout(options.timeout);
				            delete options.timeout;
				        }

				        return request(options,callback);    
				    }
				} else Ajax = require('./ajax');   


				function transport(options,data,callback) {
				    var promise = new Promise();

				    var xhr = Ajax.request(options,function(res) {
				        var response = {}, error;

				        if(typeof res.data !== 'object') {
				            res.data = [];
				            res.on('data',function(data){
				                res.data.push(data);
				            });
				        }   

				        res.on('end',function(){
				            if(res.data.length > 0) {
				                try {  
				                    response = JSON.parse(res.data.join(''));
				                } catch(e) {
				                    response = res.data.join('');
				                } 
				            }  

				            if(response.error) {
				                error = {code: response.code, message: response.errorMessage};
				            } else if(res.error) {
				                error = {code: res.statusCode, message: response.message};
				            } else if(!res) {
				                error = {code: 500, message: "internal error"};
				            }

				            if(error) {
				                promise.reject(error);
				            } else {
				                if(!response) response = {};

				                Object.defineProperty(response,'_status_',{
				                    configurable: true,
				                    value: res.statusCode
				                });
				                Object.defineProperty(response,'_headers_',{
				                    configurable: true,
				                    value: res.headers
				                });
				                promise.fulfill(response)
				            }
				        });
				    }).on('error',function(error) { 
				        promise.reject(error)
				    });   

				    if(data) xhr.write(data);
				    xhr.end();              

				    if(callback) {
				        promise.then(function(response) {
				            return callback(null,response);
				        },function(err) {
				            return callback(err.code,err.message);
				        });
				    }    

				    return promise;
				}

				function request(options,path,data,callback) { 
				    if(typeof options === 'string')
				        options = {method:options.toUpperCase()};

				    /* no data on these */
				    switch(options.method){
				        case "GET":
				        case "DELETE":
				        case "HEAD":
				            data = null;    
				            break;
				    }

				    try {
				         /* convert to Buffer to workaround issue with wrong json length */
				        data = data && !data.length ? new Buffer(JSON.stringify(data)) : data;
				    } catch(e) {
				        data = JSON.stringify(data);  
				    } 

				    options = utils.extend(true,{
				        "path" : path,
				        "headers" : {"content-length": data ? data.length : 0 }
				    }, this.server, options);

				    return transport(options,data,callback);
				}

				module.exports = request;        
			},
			"utils.js": function (exports, module, require) {
				/* 
				 * Copyright (c) 2012 Kaerus (kaerus.com), Anders Elo <anders @ kaerus com>.
				 *
				 * Licensed under the Apache License, Version 2.0 (the "License");
				 * you may not use this file except in compliance with the License.
				 * You may obtain a copy of the License at
				 *
				 *     http://www.apache.org/licenses/LICENSE-2.0
				 *
				 * Unless required by applicable law or agreed to in writing, software
				 * distributed under the License is distributed on an "AS IS" BASIS,
				 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				 * See the License for the specific language governing permissions and
				 * limitations under the License.
				 */

				"use strict"

				/* Extends object using reduce function */
				function extend() {
				    var deep = false, target, i = 0;
				    if(typeof arguments[i] === "boolean") deep = arguments[i++];
				    target = arguments[i++] || {};
				  
				    for(var source; source = arguments[i]; i++){    
				        target = Object.keys(source).reduce(function(obj,key) {
				            if(source.hasOwnProperty(key)) {  
				                if(typeof source[key] === 'object') {
				                    if(deep) obj[key] = extend(true,obj[key],source[key]);
				                } else if(source[key]) obj[key] = source[key];
				            }    
				            return obj;
				        }, target);
				    }

				    return target;
				}

				/* Allows us to declare typed function arguments. */
				/* TODO: Add default values, ranges, lists etc.   */
				/* Example: Params([{name1:"type1"},{name2:"type2"}],
				            function(name1,name2){ 
				                code 
				            } 
				*/            
				function Params(args,func) {
				    var p, t, x = "";

				    for(var i = 0; i < args.length; i++) {
				        p = Object.keys(args[i])[0];
				        t = args[i][p];
				        x+= "if(typeof arguments[i] === '" + t + "') " + "a[a.length] = arguments[i++];";
				        x+= "else a[a.length] = undefined;";
				    }
				    return new Function("f","return function(){var i = 0, a = [];" + x + "return f.apply(this,a);};")(func);
				}


				/* Prototypal inheritance (from nodejs) */
				function inherit(self, parent) {
				    self.super_ = parent;
				    self.prototype = Object.create(parent.prototype, {
				            constructor: {
				                value: self,
				                enumerable: false,
				                writable: true,
				                configurable: true
				            }
				        });
				}

				function parseUrl(str) {
				    var url = /^(?:([A-Za-z]+):)(\/{0,3})(?:([^\x00-\x1F\x7F:]+)?:?([^\x00-\x1F\x7F:]*)@)?([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^\x00-\x1F\x7F]+))?$/,
				        u = url.exec(str);
				    if(!u) return false;
				    var path = /^([\w\-]+)?(?:#([\w\-]+))?(?:\:([\w\-]+))?(?:\?(.*))?$/,
				        p = u[7] ? path.exec(u[7]) : null;    
				    return u ? {uriparts:u,
				        protocol:u[1],
				        username:u[3],
				        password:u[4],
				        hostname:u[5],
				        port:u[6],
				        path:p?{
				            first:p[1],
				            hash:p[2],
				            base:p[3],
				            query:p[4],
				            string:u[7]
				        }:u[7]} : false;   
				}

				function isArray(a) {
				    return Object.prototype.toString.call(a) === '[object Array]'
				}


				module.exports = { 
				    extend: extend,
				    inherit: inherit,
				    isArray: isArray, 
				    parseUrl: parseUrl,
				    Params: Params   
				};

			}
		}
	}
})("arango-client/index");
});
