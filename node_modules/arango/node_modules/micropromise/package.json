{
  "name": "micropromise",
  "version": "0.3.7",
  "description": "A+ promises",
  "implements": [
    "Promises/A+ 1.1.0"
  ],
  "keywords": [
    "promise",
    "future",
    "promises-aplus"
  ],
  "author": {
    "name": "Kaerus",
    "email": "contact@kaerus.com",
    "url": "http://kaerus.com"
  },
  "contributors": [
    {
      "name": "anders elo",
      "email": "anders@kaerus.com"
    }
  ],
  "dependencies": {
    "microtask": "0.1.4"
  },
  "devDependencies": {
    "promises-aplus-tests": ">=1.0.0",
    "benchmark": ">=1.0.0",
    "test-support": "~0.3"
  },
  "bugs": {
    "url": "https://github.com/kaerus-component/uP/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kaerus-component/uP"
  },
  "scripts": {
    "test": "make test"
  },
  "main": "index.js",
  "license": "APACHE2_0",
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\">\r\n    <img src=\"http://promises-aplus.github.io/promises-spec/assets/logo-small.png\"\r\n         align=\"right\" alt=\"Promises/A+ logo\" />\r\n</a>\r\n[![Build Status](https://travis-ci.org/kaerus-component/uP.png)](https://travis-ci.org/kaerus-component/uP)\r\n\r\n# microPromise(uP) - A+ v1.1 compliant promises\r\nProvides a [fast](benchmarks.md) Promises framework which is fully conforming to the Promise/A+ v1.1 specification (passing ~870 [tests](https://travis-ci.org/kaerus-component/uP)).\r\n\r\n  - [task](#task)\r\n  - [uP.then()](#upthenonfulfillfunctiononrejectfunctiononnotifyfunction)\r\n  - [uP.spread()](#upspreadonfulfillfunctiononrejectfunctiononnotifyfunction)\r\n  - [uP.done()](#updoneonfulfillfunctiononrejectfunctiononnotifyfunction)\r\n  - [uP.fulfill()](#upfulfillvalueobject)\r\n  - [uP.resolve()](#upresolvevalueobject)\r\n  - [uP.reject()](#uprejectreasonobject)\r\n  - [uP.timeout()](#uptimeouttimenumbercallbackfunction)\r\n  - [uP.wrap()](#upwrapprotoobject)\r\n  - [uP.defer()](#updefer)\r\n  - [uP.async()](#upasync)\r\n  - [uP.join()](#upjoinpromisesarray)\r\n  - [resolver()](#resolver)\r\n\r\n## uP.then(onFulfill:Function, onReject:Function, onNotify:Function)\r\n\r\n  Attaches callback,errback,notify handlers and returns a promise \r\n  \r\n  Example: catch fulfillment or rejection\r\n```js\r\n   var p = uP();\r\n   p.then(function(value){\r\n       console.log(\"received:\", value);\r\n   },function(error){\r\n       console.log(\"failed with:\", error);\r\n   });\r\n   p.fulfill('hello world!'); // => 'received: hello world!'\r\n```\r\n\r\n  \r\n  Example: chainable then clauses\r\n```js\r\n   p.then(function(v){\r\n       console.log('v is:', v);\r\n       if(v > 10) throw new RangeError('to large!');\r\n       return v*2;\r\n   }).then(function(v){ \r\n       // gets v*2 from above\r\n       console.log('v is:', v)\r\n   },function(e){\r\n       console.log('error2:', e);\r\n   });\r\n   p.fulfill(142); // => v is: 142, error2: [RangeError:'to large']\r\n```\r\n\r\n  \r\n  Example: undefined callbacks are ignored\r\n```js\r\n   p.then(function(v){\r\n       if(v < 0) throw v;\r\n       return v;\r\n   }).then(undefined,function(e){\r\n       e = -e;\r\n       return e;\r\n   }).then(function(value){\r\n       console.log('we got:', value);\r\n   });\r\n   p.fulfill(-5); // => we got: 5\r\n```\r\n\r\n## uP.spread(onFulfill:Function, onReject:Function, onNotify:Function)\r\n\r\n  Same semantic as `then` but spreads array value into separate arguments \r\n  \r\n  Example: Multiple fulfillment values\r\n```js\r\n   p = uP();\r\n   p.fulfill([1,2,3])\r\n   p.spread(function(a,b,c){\r\n       console.log(a,b,c); // => '1 2 3'\r\n   });\r\n```\r\n\r\n## uP.done(onFulfill:Function, onReject:Function, onNotify:Function)\r\n\r\n  Same as `then` but terminates a promise chain and calls onerror / throws error on unhandled Errors \r\n  \r\n  Example: capture error with done\r\n```js\r\n   p.then(function(v){\r\n       console.log('v is:', v);\r\n       if(v > 10) throw new RangeError('to large!');\r\n       return v*2;\r\n   }).done(function(v){ \r\n       // gets v*2 from above\r\n       console.log('v is:', v)\r\n   });\r\n   p.fulfill(142); // => v is: 142, throws [RangeError:'to large']\r\n```\r\n\r\n  Example: use onerror handler\r\n```js\r\n   p.onerror = function(error){ console.log(\"Sorry:\",error) };\r\n   p.then(function(v){\r\n       console.log('v is:', v);\r\n       if(v > 10) throw new RangeError('to large!');\r\n       return v*2;\r\n   }).done(function(v){ \r\n       // gets v*2 from above\r\n       console.log('v is:', v)\r\n   });\r\n   p.fulfill(142); // => v is: 142, \"Sorry: [RangeError:'to large']\"\r\n```\r\n\r\n## uP.fulfill(value:Object)\r\n\r\n  Fulfills a promise with a `value` \r\n  \r\n   Example: fulfillment\r\n```js\r\n   p = uP();\r\n   p.fulfill(123);\r\n```\r\n\r\n   \r\n   Example: multiple fulfillment values in array\r\n```js\r\n   p = uP();\r\n   p.fulfill([1,2,3]);\r\n   p.resolved; // => [1,2,3]\r\n```\r\n\r\n## uP.resolve(value:Object)\r\n\r\n  Resolves a promise with a `value` yielded from another promise \r\n  \r\n   Example: resolve literal value\r\n```js\r\n   p = uP();\r\n   p.resolve(123); // fulfills promise with 123\r\n```\r\n\r\n   Example: resolve value from another pending promise\r\n```js\r\n   p1 = uP();\r\n   p2 = uP();\r\n   p1.resolve(p2);\r\n   p2.fulfill(123) // => p2._value = 123\r\n```\r\n\r\n## uP.reject(reason:Object)\r\n\r\n  Rejects promise with a `reason`\r\n  \r\n   Example:\r\n```js\r\n   p = uP();\r\n   p.then(function(ok){\r\n      console.log(\"ok:\",ok);\r\n   }, function(error){\r\n      console.log(\"error:\",error);\r\n   });\r\n   p.reject('some error'); // outputs => 'error: some error'\r\n```\r\n\r\n## uP.timeout(time:Number, callback:Function)\r\n\r\n  Timeout a pending promise and invoke callback function on timeout.\r\n  Without a callback it throws a RangeError('exceeded timeout').\r\n  \r\n  Example: timeout & abort()\r\n```js\r\n   var p = Promise();\r\n   p.attach({abort:function(msg){console.log('Aborted:',msg)}});\r\n   p.timeout(5000);\r\n   // ... after 5 secs ... => Aborted: |RangeError: 'exceeded timeout']\r\n```\r\n\r\n  Example: cancel timeout\r\n```js\r\n   p.timeout(5000);\r\n   p.timeout(null); // timeout cancelled\r\n```\r\n\r\n## uP.wrap(proto:Object)\r\n\r\n  Wraps a `proto` into a promise\r\n  \r\n  Example: wrap an Array\r\n```js\r\n   p = Promise();\r\n   c = p.wrap(Array);\r\n   c(1,2,3); // => calls constructor and fulfills promise \r\n   p.resolved; // => [1,2,3]\r\n```\r\n\r\n## uP.defer()\r\n\r\n  Deferres a task and fulfills with return value.\r\n  The process may also return a promise itself which to wait on.  \r\n  \r\n  Example: Make readFileSync async\r\n```js\r\n   fs = require('fs');\r\n   var asyncReadFile = uP().defer(fs.readFileSync,'./index.js','utf-8');\r\n   asyncReadFile.then(function(data){\r\n       console.log(data)\r\n   },function(error){\r\n       console.log(\"Read error:\", error);\r\n   });\r\n```\r\n\r\n## uP.async()\r\n\r\n  Adapted for nodejs style functions expecting a callback. \r\n  \r\n  Example: make readFile async\r\n```js\r\n   fs = require('fs');\r\n   var asyncReadFile = uP.async(fs.readFile,'./index.js','utf-8');\r\n   asyncReadFile.then(function(data){\r\n       console.log(data);\r\n   },function(error){\r\n       console.log(\"Read error:\", error);\r\n   });\r\n```\r\n\r\n## uP.join(promises:Array)\r\n\r\n  Joins promises and collects results into an array.\r\n  If any of the promises are rejected the chain is also rejected.  \r\n  \r\n  Example: join with two promises\r\n```js\r\n   a = uP();\r\n   b = uP();\r\n   c = uP();\r\n   a.join([b,c]).spread(function(a,b,c){\r\n       console.log(a,b,c);\r\n   },function(err){\r\n       console.log('error=',err);\r\n   });\r\n   b.fulfill('world');\r\n   a.fulfill('hello'); \r\n   c.fulfill('!'); // => 'hello world !''\r\n```\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kaerus-component/uP",
  "_id": "micropromise@0.3.7",
  "dist": {
    "shasum": "6336529ca69d854fbddec880c072ed924a2cf374"
  },
  "_resolved": "git://github.com/kaerus-component/uP#8896e327aba2c0a94f91d11057e8ad3b93e0dae5",
  "_from": "micropromise@git://github.com/kaerus-component/uP#0.3.7"
}
